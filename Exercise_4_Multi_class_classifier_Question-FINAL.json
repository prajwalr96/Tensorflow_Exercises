{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "wYtuKeK0dImp"
   },
   "outputs": [],
   "source": [
    "# ATTENTION: Please do not alter any of the provided code in the exercise. Only add your own code where indicated\n",
    "# ATTENTION: Please do not add or remove any cells in the exercise. The grader will check specific cells based on the cell position.\n",
    "# ATTENTION: Please use the provided epoch values when training.\n",
    "\n",
    "import csv\n",
    "import numpy as np\n",
    "import tensorflow as tf\n",
    "from tensorflow.keras.preprocessing.image import ImageDataGenerator\n",
    "from os import getcwd"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "4kxw-_rmcnVu"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(27455, 28, 28)\n",
      "(27455,)\n",
      "(7172, 28, 28)\n",
      "(7172,)\n"
     ]
    }
   ],
   "source": [
    "def get_data(filename):\n",
    "  # You will need to write code that will read the file passed\n",
    "  # into this function. The first line contains the column headers\n",
    "  # so you should ignore it\n",
    "  # Each successive line contians 785 comma separated values between 0 and 255\n",
    "  # The first value is the label\n",
    "  # The rest are the pixel values for that picture\n",
    "  # The function will return 2 np.array types. One with all the labels\n",
    "  # One with all the images\n",
    "  #\n",
    "  # Tips: \n",
    "  # If you read a full line (as 'row') then row[0] has the label\n",
    "  # and row[1:785] has the 784 pixel values\n",
    "  # Take a look at np.array_split to turn the 784 pixels into 28x28\n",
    "  # You are reading in strings, but need the values to be floats\n",
    "  # Check out np.array().astype for a conversion\n",
    "    with open(filename) as training_file:\n",
    "      # Your code starts here\n",
    "        csv_reader = csv.reader(training_file, delimiter=',')\n",
    "        first_line = True\n",
    "        temp_images = []\n",
    "        temp_labels = []\n",
    "\n",
    "        for row in csv_reader:\n",
    "            if first_line:\n",
    "                first_line = False\n",
    "            else:\n",
    "                temp_labels.append(row[0])\n",
    "                image_data = row[1:785]\n",
    "                image_data_as_array = np.array_split(image_data, 28)\n",
    "                temp_images.append(image_data_as_array)\n",
    "        images = np.array(temp_images).astype('float')\n",
    "        labels = np.array(temp_labels).astype('float')\n",
    "      # Your code ends here\n",
    "    return images, labels\n",
    "\n",
    "path_sign_mnist_train = f\"{getcwd()}/../tmp2/sign_mnist_train.csv\"\n",
    "path_sign_mnist_test = f\"{getcwd()}/../tmp2/sign_mnist_test.csv\"\n",
    "training_images, training_labels = get_data(path_sign_mnist_train)\n",
    "testing_images, testing_labels = get_data(path_sign_mnist_test)\n",
    "\n",
    "# Keep these\n",
    "print(training_images.shape)\n",
    "print(training_labels.shape)\n",
    "print(testing_images.shape)\n",
    "print(testing_labels.shape)\n",
    "\n",
    "# Their output should be:\n",
    "# (27455, 28, 28)\n",
    "# (27455,)\n",
    "# (7172, 28, 28)\n",
    "# (7172,)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "awoqRpyZdQkD"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(27455, 28, 28, 1)\n",
      "(7172, 28, 28, 1)\n"
     ]
    }
   ],
   "source": [
    "# In this section you will have to add another dimension to the data\n",
    "# So, for example, if your array is (10000, 28, 28)\n",
    "# You will need to make it (10000, 28, 28, 1)\n",
    "# Hint: np.expand_dims\n",
    "\n",
    "training_images = np.expand_dims(training_images, axis=3)# Your Code Here\n",
    "testing_images = np.expand_dims(testing_images, axis=3)# Your Code Here\n",
    "\n",
    "# Create an ImageDataGenerator and do Image Augmentation\n",
    "train_datagen = ImageDataGenerator(\n",
    "    rescale = 1./255.,\n",
    "    rotation_range = 40,\n",
    "    width_shift_range = 0.2,\n",
    "    height_shift_range = 0.2,\n",
    "    shear_range = 0.2,\n",
    "    zoom_range = 0.2,\n",
    "    horizontal_flip = True,\n",
    "    fill_mode = 'nearest'\n",
    "    # Your Code Here\n",
    "    )\n",
    "\n",
    "validation_datagen = ImageDataGenerator(rescale = 1./255.)\n",
    "    # Your Code Here)\n",
    "    \n",
    "# Keep These\n",
    "print(training_images.shape)\n",
    "print(testing_images.shape)\n",
    "    \n",
    "# Their output should be:\n",
    "# (27455, 28, 28, 1)\n",
    "# (7172, 28, 28, 1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "Rmb7S32cgRqS"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/2\n",
      "858/857 [==============================] - 65s 75ms/step - loss: 2.8252 - accuracy: 0.1508 - val_loss: 2.1195 - val_accuracy: 0.3238\n",
      "Epoch 2/2\n",
      "858/857 [==============================] - 59s 69ms/step - loss: 2.1583 - accuracy: 0.3269 - val_loss: 1.3831 - val_accuracy: 0.5261\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "[239.72732287788284, 0.31330174]"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Define the model\n",
    "# Use no more than 2 Conv2D and 2 MaxPooling2D\n",
    "model = tf.keras.models.Sequential([\n",
    "    # Your Code Here\n",
    "    tf.keras.layers.Conv2D(64, (3,3), activation='relu', input_shape=(28,28,1)),\n",
    "    tf.keras.layers.MaxPooling2D(2,2),\n",
    "    tf.keras.layers.Conv2D(64, (3,3), activation='relu'),\n",
    "    tf.keras.layers.MaxPooling2D(2,2),\n",
    "    tf.keras.layers.Flatten(),\n",
    "    tf.keras.layers.Dense(128, activation='relu'),\n",
    "    tf.keras.layers.Dense(26, activation='softmax')]\n",
    "    )\n",
    "\n",
    "# Compile Model. \n",
    "model.compile(optimizer='rmsprop',\n",
    "    loss = 'sparse_categorical_crossentropy',\n",
    "    metrics = ['accuracy'])# Your Code Here)\n",
    "\n",
    "# Train the Model\n",
    "history = model.fit_generator(train_datagen.flow(\n",
    "    training_images, training_labels, batch_size=32),\n",
    "    steps_per_epoch = len(training_images)/32,\n",
    "    epochs = 2,\n",
    "    validation_data = validation_datagen.flow(testing_images,\n",
    "                        testing_labels, batch_size=32),\n",
    "                        validation_steps = len(testing_images)/32)\n",
    "\n",
    "model.evaluate(testing_images, testing_labels, verbose=0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "_Q3Zpr46dsij"
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Plot the chart for accuracy and loss on both training and validation\n",
    "%matplotlib inline\n",
    "import matplotlib.pyplot as plt\n",
    "acc = history.history['accuracy']# Your Code Here\n",
    "val_acc = history.history['val_accuracy']# Your Code Here\n",
    "loss = history.history['loss']# Your Code Here\n",
    "val_loss = history.history['val_loss']# Your Code Here\n",
    "\n",
    "epochs = range(len(acc))\n",
    "\n",
    "plt.plot(epochs, acc, 'r', label='Training accuracy')\n",
    "plt.plot(epochs, val_acc, 'b', label='Validation accuracy')\n",
    "plt.title('Training and validation accuracy')\n",
    "plt.legend()\n",
    "plt.figure()\n",
    "\n",
    "plt.plot(epochs, loss, 'r', label='Training Loss')\n",
    "plt.plot(epochs, val_loss, 'b', label='Validation Loss')\n",
    "plt.title('Training and validation loss')\n",
    "plt.legend()\n",
    "\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Submission Instructions"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Now click the 'Submit Assignment' button above."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# When you're done or would like to take a break, please run the two cells below to save your work and close the Notebook. This will free up resources for your fellow learners. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "%%javascript\n",
    "<!-- Save the notebook -->\n",
    "IPython.notebook.save_checkpoint();"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "%%javascript\n",
    "IPython.notebook.session.delete();\n",
    "window.onbeforeunload = null\n",
    "setTimeout(function() { window.close(); }, 1000);"
   ]
  }
 ],
 "metadata": {
  "colab": {
   "name": "Exercise 8 - Question.ipynb",
   "provenance": []
  },
  "coursera": {
   "course_slug": "convolutional-neural-networks-tensorflow",
   "graded_item_id": "8mIh8",
   "launcher_item_id": "gg95t"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 1
}
